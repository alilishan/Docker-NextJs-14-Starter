# This is for content updates

name: Deploy UAT Server

on:
  workflow_dispatch:


jobs:
  deploy:

    runs-on: [self-hosted, new-server-name]

    strategy:
      matrix:
        node-version: [16.x]

    env:
        APP_ENV: UAT
        APP_NAME: MARC_APP_LOGS_UAT
        APP_PORT: 5000
        APP_NAME_DOCKER: next14-docker-starter
        APP_BASE_URL: "https://www-uat.marcdata.com.my/ounchlogs"
        APP_VERSION: ${{ github.run_number }}.${{ github.run_attempt }}
        API_GATEWAY_URL: "https://api-uat.marcdata.com.my"

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/checkout@v2

      - name: Print commit ID and message
        run: |
          git show -s --format='%h %s'

      - name: List Docker Containers
        run: docker ps --all

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v7

      - name: 'Create env file'
        run: |
          touch .env
          echo "APP_ENV=${{ env.APP_ENV }}" >> .env
          echo "APP_VERSION=UAT.${{ steps.branch-name.outputs.current_branch }}.${{ env.APP_VERSION }}" >> .env
          echo "APP_NAME=${{ env.APP_NAME }}" >> .env
          echo "APP_BASE_URL=${{ env.APP_BASE_URL }}" >> .env
          echo "API_URL=${{ env.API_GATEWAY_URL }}" >> .env
          echo "API_ID=${{ vars.GATEWAY_UAT_API_ID }}" >> .env
          echo "API_KEY=${{ secrets.GATEWAY_UAT_API_KEY }}" >> .env
          echo "API_SECRET=${{ secrets.GATEWAY_UAT_API_SECRET }}" >> .env
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env
          echo "NEXT_PUBLIC_APP_BASE_URL=${{ env.APP_BASE_URL }}" >> .env
          echo "NEXT_PUBLIC_APP_VERSION=UAT.${{ steps.branch-name.outputs.current_branch }}.${{ env.APP_VERSION }}" >> .env
          cat .env

      - name: Build Docker Image
        run: docker build -t ${{ env.APP_NAME_DOCKER }} . --no-cache
        env:
          CI: true

      - name: Install NPM dependencies inside the Image
        run: docker run -v .:/app -v ./node_modules:/app/node_modules ${{ env.APP_NAME_DOCKER }} npm install
        env:
          CI: true

      - name: Build App inside the Image
        run: docker run -v .:/app -v ./node_modules:/app/node_modules ${{ env.APP_NAME_DOCKER }} npm run build

      - name: Stop Docker Container
        run: docker stop ${{ env.APP_NAME_DOCKER }}-container

      - name: Remove Docker Container
        run: docker rm ${{ env.APP_NAME_DOCKER }}-container

      - name: Restart the Docker Container
        run: docker run -d --name ${{ env.APP_NAME_DOCKER }}-container -v .:/app -v ./node_modules:/app/node_modules -p 127.0.0.1:${{ env.APP_PORT }}:3000 marc-logs-app npm run start
        env:
          CI: true
